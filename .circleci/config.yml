version: 2.1

orbs:
  slack: circleci/slack@4.12.5
  python: circleci/python@2.1.1

commands:
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks with given a workflow ID.
    parameters:
      id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Destroy CloudFormation Frontend Stacks
          when: on_fail
          command: |
            echo "Deleting CloudFormation Frontend Stack"
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >> --output text
      - run:
          name: Destroy CloudFormation Backend Stacks
          when: on_fail
          command: |
            echo "Deleting CloudFormation Backend Stack"
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >> --output text

  revert-migrations:
    description: Revert the last migration
    parameters:
      workflow_id:
        type: string      
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Your Memstash or kvdb.io GET URL code goes here
            # Example: Memstash.io
            # SUCCESS=$(curl -H "token: e52b52de-ee26-41a5-86e8-e8dcc3d995a5" --request GET https://api.memstash.io/values/migration_<< parameters.workflow_id >>)
            
            # Example: kvdb.io
            KVDB_BUCKET_ID="RqV74qW577WGEvvGr76j8z"
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET_ID}/migration_<< parameters.workflow_id >>)
            echo $SUCCESS
            # Logic for reverting the database state
            if [[ "$SUCCESS" == "1" ]]
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi 

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end build
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      - run: 
          name: Create backend env file
          command: |
            cd backend
            touch .env
            echo NODE_ENV=production >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> .env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> .env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build

            # create backend files
            cd ..
            tar -C backend -czvf artifact.tar.gz .

      - persist_to_workspace:
          root: ~/
          paths:
            -  project/artifact.tar.gz            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm install
            ## npm install oauth-sign@^0.9.0
            # fix critical vulnerabilities
            npm audit fix --audit-level=critical --force 
            ## If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
      # - image: cimg/node:20.3.0 # image for test slack notify
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            ## npm install oauth-sign@^0.9.0
            # fix critical vulnerabilities
            npm audit fix --audit-level=critical --force
            ## If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit fix --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # yum install tar gzip -y
            yum install tar gzip curl nodejs npm -y
      - run:
          name: Ensure backend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy \
              --tags project=udapeople \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add the EC2 instance IP to the Ansible inventory
          command: |
              BACKEND_PUBLIC_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
              echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt      
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}


  configure-infrastructure:
    executor:
      name: python/default
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
          - "c5:f6:00:9e:b4:56:43:d8:53:e2:3d:06:b3:5f:bb:20"
      - python/install-packages:
          args: ansible
      - attach_workspace:
          at: ~/    
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            # npm install
            ## Run and save the migration output
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt 
      - run:
          name: Send migration status to kvdb.io OR memstash.io (a 3rd party key-value store)
          command: |   
            cat ~/project/backend/migrations_dump.txt
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
              # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
              # If you are using kvdb.io, generate the bucket ID in your local terminal first
              # curl -d "email=truclemsoft@gmail.com" https://kvdb.io
              KVDB_BUCKET_ID="RqV74qW577WGEvvGr76j8z"
              curl -k https://kvdb.io/${KVDB_BUCKET_ID}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}   

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Install dependencies"
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get backend url
          command: |
            export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
               --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --query 'Reservations[*].Instances[*].PublicIpAddress' \
               --output text)
            export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
            echo ${API_URL}
            echo API_URL="http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects to s3
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}     

  deploy-backend:
    executor: 
      name: python/default
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
          - "c5:f6:00:9e:b4:56:43:d8:53:e2:3d:06:b3:5f:bb:20"
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - python/install-packages:
          args: ansible
      - run:
          name: Deploy backend
          command: |
            # # artifact.tar.gz ís created by job build-backend and attach to workspace
            mkdir -p .circleci/ansible/roles/deploy/files
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files

            echo "Contents  of the inventory.txt file is -------"
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml -vvv
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}   

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install tar gzip curl nodejs npm -y

      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
               --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --query 'Reservations[*].Instances[*].PublicIpAddress' \
               --output text)
            echo ${BACKEND_PUBLIC_IP}

            export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
            echo ${API_URL}

            echo "Sleeping 5m to wait for server up"
            sleep 300
            if curl -k "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -sk ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails
              exit 0
            else
              exit 1
            fi
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            # Get old WorkflowID
            export oldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo $oldWorkflowID

            KVDB_BUCKET_ID="RqV74qW577WGEvvGr76j8z"
            curl --insecure https://kvdb.io/${KVDB_BUCKET_ID}/oldWorkflowID -d ${oldWorkflowID}

            # Change the initial stack name
            aws cloudformation deploy \
                      --template-file .circleci/files/cloudfront.yml \
                      --stack-name InitialStack \
                      --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
                      --tags project=udapeople

            echo oldWorkflowID     is $oldWorkflowID
            echo currentWorkFlowId is ${CIRCLE_WORKFLOW_ID:0:7}

      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            echo "Fetch the Old workflow ID"
            export OldWorkflowID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)

            export CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}

            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

            echo "Fetch the stack names"    
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
 
            echo "Remove old stacks and files"
            if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
            then
              echo "Deleting old version $OldWorkflowID!=$CurrentWorkflowID"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive --output text
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}" --output text
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}" --output text
              echo "Deleted old version $OldWorkflowID!=$CurrentWorkflowID"
            else
              echo "No need to do. $OldWorkflowID==$CurrentWorkflowID"
            fi
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

          
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          context: UDACITY # setup this context to use for slack notify
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]

      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]

      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: [master]

      - run-migrations:
          requires: [configure-infrastructure]
          filters:
            branches:
              only: [master]

      - deploy-frontend:
          requires: [run-migrations]
          filters:
            branches:
              only: [master]

      - deploy-backend:
          requires: [run-migrations]
          filters:
            branches:
              only: [master]

      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          filters:
            branches:
              only: [master]

      - cloudfront-update:
          requires: [smoke-test]
          filters:
            branches:
              only: [master]

      - cleanup:
          requires: [cloudfront-update]
          filters:
            branches:
              only: [master]          
      
